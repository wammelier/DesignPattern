# 상속에 대한 고찰...

상속은 가장 좋은 해결방안은 아니다. 규격이 계속 바뀔 때마다 전에 추가했던 메소드를 일일이 살펴봐야 하고, 상황에 따라 오버라이드해야 할 수도 있으니깐..
예를들어 subClass에 오버라이드된 메소드가 조금이라도 바뀌면 해당하는 subClass는 모두 코드를 고쳐야하기 때문에...
서브클래스마다 행동이 바뀔수 있는데도 모든 서브 클래스에서 한 행동을 사용하도록 하는 것은 옳바르지 않다...

# 변화하는 부분과 그렇지 않은 부분 구분하기
오리를 예를 들어볼때 첫번째는 하늘을 나는것과 두번째로는 꽥꽥거리는 소리 와 관련된것을 분류한다. 각 클래스 집합에는 각각의 행동을 구현한 것을 전부 집어넣는다.
예를들어 꽥꽥거리는 것을 구현하는 클래스를 하나 만들고, 삑삑거리는 것을 구현하는 클래스를 하나 만들고, 아무 소리도 내지 않는 것을 구현하는 클래스를 하나 만든는 식이다.

Duck class 에서 fly(), quack()는 오리마다 달라지는 부분이다! 이러한 행동을 Duck클래스로부터 갈라내기 위해서 그 두 메소드를 모두 Duck 클래스로부터 끄집어내서 각 행동을
나타낼 클래스 집합을 새로 만들도록 한다.

# 각 행동은 인터페이스(ex: FlyBehavior, QuackBehavior)로 표현하고 행동을 구현할 때 이런 인터페이스를 구현한다.

# 인터페이스에 맞춰서 프로그래밍한다 는 것은 사실 상위 형식에 맞춰서 프로그래밍한다 는 것을 뜻한다.




50page까지 완료